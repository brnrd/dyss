// Generated by CoffeeScript 1.7.1
var Sheet,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Sheet = (function() {
  function Sheet() {
    var isWebkit, style;
    style = document.createElement('style');
    isWebkit = !!window.webkitURL;
    isWebkit = isWebkit || __indexOf.call(document.documentElement.style, 'WebkitAppearance') >= 0;
    if (isWebkit) {
      style.appendChild(document.createTextNode(''));
    }
    document.head.appendChild(style);
    this.sheet = style.sheet;
  }

  Sheet.prototype.addMediaAttribute = function(mediaAttribute) {
    this._style.setAttribute('media', mediaAttribute);
  };

  Sheet.prototype.getSheet = function() {
    return this.sheet;
  };

  Sheet.prototype._add = function(selector, rules, index) {
    if (index != null) {
      index = 0;
    }
    if (this.sheet.insertRule) {
      this.sheet.insertRule("" + selector + " { " + rules + " }", index);
    } else {
      this.sheet.add(selector, rules, index);
    }
  };

  Sheet.prototype.add = function(selector, set) {
    var key, rules, value;
    rules = (function() {
      var _results;
      _results = [];
      for (key in set) {
        value = set[key];
        _results.push("" + (this._cssify(key)) + ": " + value + ";");
      }
      return _results;
    }).call(this);
    rules = rules.join(' ');
    this._add(selector, rules);
  };

  Sheet.prototype.addClass = function(set) {
    var name;
    name = '.' + this._getRandomName;
    this.add(name, set);
    return name;
  };

  Sheet.prototype.updateSet = function(selector, set) {
    var item, key, value;
    item = this._getSelector(selector);
    if (item === -1) {
      this.addSet(selector, set);
    } else {
      for (key in set) {
        value = set[key];
        item.style[key] = value;
      }
    }
  };

  Sheet.prototype._cssify = function(proprety) {
    var cssedProperty, temp;
    cssedProperty = '';
    temp = proprety.split(/(?=[A-Z])/);
    if (temp instanceof Array && temp.length === 2) {
      cssedProperty = temp.join('-');
    } else {
      cssedProperty = temp;
    }
    return cssedProperty;
  };

  Sheet.prototype._getSelector = function(selector) {
    var rule, rulesArray, _i, _len;
    rulesArray = this.sheet.rules;
    for (_i = 0, _len = rulesArray.length; _i < _len; _i++) {
      rule = rulesArray[_i];
      if (rule.selectorText === selector) {
        return rule;
      }
    }
    return -1;
  };

  Sheet.prototype._getRandomName = function(length) {
    var name;
    if (length == null) {
      length = 8;
    }
    name = "";
    while (name.length < length) {
      name += Math.random().toString(36).substr(2);
    }
    return name.substr(0, length);
  };

  Sheet.prototype._getSelectorType = function(selector) {
    var firstChar, type;
    firstChar = selector.chatAt(0);
    return type = (function() {
      switch (false) {
        case firstChar !== '.':
          return 'class';
        case firstChar !== '#':
          return 'id';
        default:
          return 'element';
      }
    })();
  };

  return Sheet;

})();

//# sourceMappingURL=jCSS.map
